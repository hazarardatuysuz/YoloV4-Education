# -*- coding: utf-8 -*-
"""yoloV4_Egitimi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_R-p40lmcA8QkQCkT5szhZJE6zdEWJQG

**1.ADIM DARKNET KLONLAMA VE KURULUMU**
"""

# github reposundan darkneti klonluyoruz.
!git clone https://github.com/AlexeyAB/darknet

# Commented out IPython magic to ensure Python compatibility.
# makefile içindeki bazı değerleri değiştiriyoruz.
# %cd darknet
!sed -i 's/OPENCV=0/OPENCV=1/' Makefile
!sed -i 's/GPU=0/GPU=1/' Makefile
!sed -i 's/CUDNN=0/CUDNN=1/' Makefile
!sed -i 's/CUDNN_HALF=0/CUDNN_HALF=1/' Makefile

# versiyonumuzu kontrol ediyoruz.
!/usr/local/cuda/bin/nvcc --version

# darknet kurulumu yapıyoruz.
!make

"""**2.ADIM DRİVE EKLEME**"""

# Commented out IPython magic to ensure Python compatibility.
# %cd ..
from google.colab import drive  
drive.mount('/content/drive')

# drivemızın yolunu girmek yerine artık kısaca /mydrive diyebiliriz.
!ln -s /content/drive/My\ Drive/ /mydrive
!ls /mydrive

"""**3.ADIM VERİSETİNİ YÜKLEME**"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/darknet
!ls ../drive/MyDrive/yolov4

# contentin içine zip dosyalarının gelmesi lazım.
!cp /mydrive/yolov4/obj.zip ../
!cp /mydrive/yolov4/test.zip ../

# dosyaları darknet/data içinde zipden çıkartıyoruz.
!unzip ../obj.zip -d data/
!unzip ../test.zip -d data/

"""**4.ADIM EĞİTİM İÇİN GEREKLİ DOSYALARI HAZIRLAMA**

config dosyası
"""

# darknetteki cfg dosyasını kendi drivemıza alıyoruz.
!cp cfg/yolov4-custom.cfg /mydrive/yolov4/yolov4-obj.cfg

"""Config dosyamızda yapmamız gereken değişiklikler:

(Burada verilen değerler bu değişkenlerin önerilen değerleridir.)

batch = 64 ve subdivision 64.

max_batches değerini (2000 * eğitilen sınıf sayısı) değerine eşitliyoruz.Ama yoloV4 için 6000 veya altındaysa en az 6000 yapıyoruz.

steps değerlerini (%80 of max_batches) , (%90 of max_batches) yapıyoruz.

[yolo] başlığı altındaki classes değerlerini eğitim yaptığımız sınıf sayısı ile değiştiriyoruz.

filters değişkenlerini de (eğitim yapacağımız sınıf sayısı + 5 )*3 değerine eşitliyoruz
"""

# kendi drivemızdan alıp darknetteki yerine geri yolluyoruz.
!cp /mydrive/yolov4/yolov4-obj.cfg ./cfg

"""names ve data dosyaları"""

# Commented out IPython magic to ensure Python compatibility.
# names ve data dosyalarını direkt olarak darknet/data ya yüklüyoruz.
# %cd data/
!echo "character" >> obj.names
!echo "classes = 1"  >> obj.data
!echo "train = data/train.txt"  >> obj.data
!echo "valid = data/test.txt"  >> obj.data
!echo "names = data/obj.names"  >> obj.data
!echo "backup = /mydrive/yolov4/backup"  >> obj.data
# %cd ../

"""generate_train ve generate_test dosyaları"""

# generate_train.py dosyamızı darknet içinde oluşturuyoruz.

!echo  "import os" >> generate_train.py
!echo  "image_files = []" >> generate_train.py
!echo  "os.chdir(os.path.join(\"data\", \"obj\"))" >> generate_train.py
!echo  "for filename in os.listdir(os.getcwd()):" >> generate_train.py
!echo  "    if filename.endswith(\".jpg\"):" >> generate_train.py
!echo  "        image_files.append(\"data/obj/\" + filename)" >> generate_train.py
!echo  "os.chdir(\"..\")" >> generate_train.py
!echo  "with open(\"train.txt\", \"w\") as outfile:" >> generate_train.py
!echo  "    for image in image_files:" >> generate_train.py
!echo  "        outfile.write(image)" >> generate_train.py
!echo  "        outfile.write(\"\n\")" >> generate_train.py
!echo  "    outfile.close()" >> generate_train.py
!echo  "os.chdir(\"..\")" >> generate_train.py

# generate_test.py dosyamızıda darknet içinde oluşturuyoruz.
!echo  "import os" >> generate_test.py
!echo  "image_files = []" >> generate_test.py
!echo  "os.chdir(os.path.join(\"data\", \"test\"))" >> generate_test.py
!echo  "for filename in os.listdir(os.getcwd()):" >> generate_test.py
!echo  "    if filename.endswith(\".jpg\"):" >> generate_test.py
!echo  "        image_files.append(\"data/test/\" + filename)" >> generate_test.py
!echo  "os.chdir(\"..\")" >> generate_test.py
!echo  "with open(\"test.txt\", \"w\") as outfile:" >> generate_test.py
!echo  "    for image in image_files:" >> generate_test.py
!echo  "        outfile.write(image)" >> generate_test.py
!echo  "        outfile.write(\"\n\")" >> generate_test.py
!echo  "    outfile.close()" >> generate_test.py
!echo  "os.chdir(\"..\")" >> generate_test.py

# bu dosyaları oluşturduğumuzda text.txt ve train.txt dosyaları oluşur.
!python generate_train.py
!python generate_test.py

# train.txt ve test.txt dosyalarını darknet/data içinde görmemiz lazım.
!ls data/

"""**5.ADIM ÖNCEDEN EĞİTİLMİŞ AĞIRLIKLARI İNDİRME**"""

!wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.conv.137

"""**6.ADIM EĞİTİME BAŞLAYALIM**

Eğitime başladığımız zaman bilgisayar uzun süre açık kalıyor ve colab 10 dk ekrana dokunmadığımızda gpu yu meşgul etme uyarısı veriyor bu uyarıyı almamak için kendimizi 10 dk da bir burda olarak gösteriyoruz.

```
function ClickConnect(){
console.log("Working"); 
document.querySelector("colab-toolbar-button#connect").click() 
}
setInterval(ClickConnect,30000)
```
"""

# Eğitim işlemini başlatıyoruz.
!./darknet detector train data/obj.data cfg/yolov4-obj.cfg yolov4.conv.137 -dont_show -map

# Eğitim sonucumuzu beğenmediysek burdan kaldığımız yerden eğitime devam edebiliriz.
!./darknet detector train data/obj.data cfg/yolov4-obj.cfg /mydrive/yolov4/backup/yolov4-obj_last.weights -dont_show

# Eğitim sonucumuza bakıyoruz.
!./darknet detector map data/obj.data cfg/yolov4-obj.cfg /mydrive/yolov4/backup/yolov4-obj_last.weights

"""**7.ADIM CFG DOSYASINI KULLANILABİLİR HALE GETİRME**"""

# Commented out IPython magic to ensure Python compatibility.
# batch ve subdivision değerlerini 1 yapıyoruz.
# %cd ../mydrive/yolov4
!sed -i 's/batch=64/batch=1/' yolov4-obj.cfg
!sed -i 's/subdivisions=16/subdivisions=1/' yolov4-obj.cfg
# %cd ../../darknet

# eğitimimize ait grafiğimiz.
imShow('chart.png')